// File: PlaceOrder.jsx

import React, { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import API from '../../utils/api'
import { clearCartItems } from '../../redux/slices/cartSlice';

// Stripe SDK (Requires: npm install @stripe/stripe-js)
import { loadStripe } from '@stripe/stripe-js';

// Assume these are your custom UI components
import Button from '../ui/Button'; 
import CheckoutSteps from '../ui/CheckoutSteps'
import Message from '../ui/Message';
import Spinner from '../ui/Spinner'; 


// Helper function to format price consistently as Rupee
// Note: The price comes in as a string from the Redux state (e.g., "50000.00")
const formatRupee = (priceString) => {
    // Convert to float, then format for Indian locale
    if (!priceString) return 'â‚¹0.00';
    try {
        const price = parseFloat(priceString);
        return 'â‚¹' + price.toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
    } catch (e) {
        return 'â‚¹' + priceString; // Fallback
    }
}

// Helper function to format the product item's price (which might be a raw number)
const formatItemRupee = (priceValue) => {
    if (typeof priceValue === 'string') {
        priceValue = parseFloat(priceValue);
    }
    if (isNaN(priceValue)) return 'â‚¹0';
    return 'â‚¹' + priceValue.toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
}


const PlaceOrder = () => {
Â  Â  const navigate = useNavigate();
Â  Â  const dispatch = useDispatch();

Â  Â  // We only need the items and price breakdown from the unified orderDetails state
Â  Â  const orderDetails = useSelector((state) => state.order);
Â  Â  const { shippingAddress, paymentMethod, checkoutDetails } = orderDetails;

Â  Â  const [isLoading, setIsLoading] = useState(false);
Â  Â  const [error, setError] = useState(null); 

Â  Â  // Destructure the items and prices from the unified checkoutDetails object
Â  Â  const { 
Â  Â  Â  Â  orderItems = [], 
Â  Â  Â  Â  itemsPrice, 
Â  Â  Â  Â  shippingPrice, 
Â  Â  Â  Â  taxPrice, 
Â  Â  Â  Â  totalPrice 
Â  Â  } = checkoutDetails || {};


Â  Â  // Redirect if order prerequisites are missing
Â  Â  useEffect(() => {
Â  Â  Â  Â  // Redirect if orderItems are empty
Â  Â  Â  Â  if (orderItems.length === 0) {
Â  Â  Â  Â  Â  Â  navigate('/');
Â  Â  Â  Â  } 
Â  Â  Â  Â  // Redirect if address is missing
Â  Â  Â  Â  else if (!shippingAddress || !shippingAddress.address) {
Â  Â  Â  Â  Â  Â  navigate('/shipping');
Â  Â  Â  Â  } 
Â  Â  Â  Â  // Redirect if payment method is missing
Â  Â  Â  Â  else if (!paymentMethod) {
Â  Â  Â  Â  Â  Â  navigate('/paymentmethod');
Â  Â  Â  Â  }
Â  Â  }, [navigate, orderItems.length, shippingAddress, paymentMethod]);


Â  Â  const placeOrderHandler = async () => {
Â  Â  Â  Â  // Check if items array is truly empty before proceeding
Â  Â  Â  Â  if (orderItems.length === 0) {
Â  Â  Â  Â  Â  Â  setError('Cannot place order. Order items list is empty.');
Â  Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  }

Â  Â  Â  Â  setIsLoading(true);
Â  Â  Â  Â  setError(null);
Â  Â  Â  Â  
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  // 1. Create the Order in the Backend (POST /api/orders)
Â  Â  Â  Â  Â  Â  const orderPayload = {
Â  Â  Â  Â  Â  Â  Â  Â  orderItems: orderItems,
Â  Â  Â  Â  Â  Â  Â  Â  shippingAddress: shippingAddress,
Â  Â  Â  Â  Â  Â  Â  Â  paymentMethod: paymentMethod,
Â  Â  Â  Â  Â  Â  Â  Â  // Include calculated prices in the payload
Â  Â  Â  Â  Â  Â  Â  Â  itemsPrice, 
Â  Â  Â  Â  Â  Â  Â  Â  shippingPrice, 
Â  Â  Â  Â  Â  Â  Â  Â  taxPrice, 
Â  Â  Â  Â  Â  Â  Â  Â  totalPrice,
Â  Â  Â  Â  Â  Â  };

Â  Â  Â  Â  Â  Â  const orderResponse = await API.post('/orders', orderPayload);
Â  Â  Â  Â  Â  Â  const createdOrder = orderResponse.data;

Â  Â  Â  Â  Â  Â  // 2. Handle Cash on Delivery (COD) Flow
Â  Â  Â  Â  Â  Â  if (paymentMethod === 'Cash on Delivery (COD)') {
Â  Â  Â  Â  Â  Â  Â  Â  dispatch(clearCartItems()); 
Â  Â  Â  Â  Â  Â  Â  Â  setIsLoading(false);
Â  Â  Â  Â  Â  Â  Â  Â  // Navigate to Order Details page
Â  Â  Â  Â  Â  Â  Â  Â  navigate(`/order/${createdOrder._id}/success`);
Â  Â  Â  Â  Â  Â  Â  Â  return; 
Â  Â  Â  Â  Â  Â  } 
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  // 3. Handle Stripe/Credit Card Flow
Â  Â  Â  Â  Â  Â  else if (paymentMethod === 'CreditCard') {
Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  // Call Payment Controller (POST /api/payment/create-checkout-session)
Â  Â  Â  Â  Â  Â  Â  Â  const stripeResponse = await API.post('/payment/create-checkout-session', { 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  orderId: createdOrder._id 
Â  Â  Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  const { id: sessionId, publishableKey } = stripeResponse.data;
Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  // Load Stripe and Redirect to checkout page
Â  Â  Â  Â  Â  Â  Â  Â  const stripe = await loadStripe(publishableKey);
Â  Â  Â  Â  Â  Â  Â  Â  const result = await stripe.redirectToCheckout({ sessionId });

Â  Â  Â  Â  Â  Â  Â  Â  if (result.error) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  setError(`Payment failed to start: ${result.error.message}`);
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  } catch (err) {
Â  Â  Â  Â  Â  Â  console.error("Order Placement Error:", err);
Â  Â  Â  Â  Â  Â  setError(err.response?.data?.message || err.message || 'Order Placement Failed');
Â  Â  Â  Â  } finally {
Â  Â  Â  Â  Â  Â  // Stop the spinner only if we didn't redirect (i.e., COD or error)
Â  Â  Â  Â  Â  Â  if (!error && paymentMethod !== 'CreditCard') {
Â  Â  Â  Â  Â  Â  Â  Â  Â setIsLoading(false);
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  }
Â  Â  };


Â  Â  return (
Â  Â  Â  Â  <main className="max-w-7xl mx-auto p-4">
Â  Â  Â  Â  Â  Â  <CheckoutSteps step1={true} step2={true} step3={true} step4={true} /> 
Â  Â  Â  Â  Â  Â  <h1 className="text-3xl font-bold mb-6 text-gray-800">Place Order</h1>

Â  Â  Â  Â  Â  Â  <section className="grid grid-cols-1 md:grid-cols-3 gap-8">
Â  Â  Â  Â  Â  Â  Â  Â  {/* Left Column: Details */}
Â  Â  Â  Â  Â  Â  Â  Â  <div className="md:col-span-2 space-y-6">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Shipping Info */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <article className="border p-4 rounded-lg shadow-sm">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h2 className="text-xl font-semibold mb-2 text-lime-700">Shipping</h2>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <address>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p><strong>Name:</strong> {shippingAddress?.name}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p><strong>Address:</strong> {shippingAddress?.address}, {shippingAddress?.city}, {shippingAddress?.postalCode}, {shippingAddress?.country}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p><strong>Mobile:</strong> {shippingAddress?.mobileNumber}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </address>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </article>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Payment Info */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <article className="border p-4 rounded-lg shadow-sm">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h2 className="text-xl font-semibold mb-2 text-lime-700">Payment Method</h2>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p><strong>Method:</strong> {paymentMethod}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </article>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Order Items List */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <section className="border p-4 rounded-lg shadow-sm">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h2 className="text-xl font-semibold mb-2 text-lime-700">Order Items</h2>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {orderItems.length === 0 ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Message variant="info">Order items list is empty. Please check your cart or buy a product.</Message>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <ul role="list" className="space-y-3">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {orderItems.map((item, index) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <li key={index} className="flex justify-between items-center border-b pb-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex-1">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="font-medium">{item.name}</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="text-right">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* ðŸŽ¯ FIX 1: Use Rupee format for individual item price and total */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {item.qty} x {formatItemRupee(item.price)} = {formatItemRupee(item.qty * item.price)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </li>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </ul>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </section>
Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  {/* Right Column: Order Summary and Action Button */}
Â  Â  Â  Â  Â  Â  Â  Â  <aside className="md:col-span-1">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="border p-4 rounded-lg shadow-lg bg-gray-50 sticky top-4">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h2 className="text-2xl font-bold mb-4 text-gray-800">Order Summary</h2>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <ul role="list" className="space-y-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* ðŸŽ¯ FIX 2: Use formatRupee helper function for all summary prices */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <li className="flex justify-between">Items: <span>{formatRupee(itemsPrice)}</span></li>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <li className="flex justify-between">Shipping: <span>{formatRupee(shippingPrice)}</span></li>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <li className="flex justify-between">Tax (18%): <span>{formatRupee(taxPrice)}</span></li>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <li className="flex justify-between pt-2 border-t font-bold text-lg">Total: <span>{formatRupee(totalPrice)}</span></li>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </ul>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Display Errors */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {error && <Message variant="danger" className="mt-4">{error}</Message>}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type="button"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="w-full mt-6 bg-lime-600 hover:bg-lime-700"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={placeOrderHandler}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  // Disable if no items or loading
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  disabled={orderItems.length === 0 || isLoading} 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {isLoading ? <Spinner /> : 'Place Order'} 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </Button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  </aside>
Â  Â  Â  Â  Â  Â  </section>
Â  Â  Â  Â  </main>
Â  Â  );
};

export default PlaceOrder;